#include <GL/glut.h>
#include <iostream>
#include <math.h>

void display();
void f(int a);
int MainWindow;
GLuint Cube;
GLfloat angle;

using namespace std;

int main(int argc, char *argv[])
{
	glutInit(&argc, argv);
	//note here we initialize double buffer viewing
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(300, 300);
	glutInitWindowPosition(100, 100);

	//glEnable(GL_DEPTH_TEST);
	//glClear(GL_DEPTH_BUFFER_BIT);

	MainWindow = glutCreateWindow("Hello Graphics!!");
	glClearColor(0, 0, 0, 0);
	glutDisplayFunc(display);
	glMatrixMode(GL_MODELVIEW);

	glutTimerFunc(25, f, 0);

	Cube = glGenLists(1);
	glNewList(Cube, GL_COMPILE);

	// Red side - BOTTOM
	glBegin(GL_POLYGON);
	glColor3f(1.0, 0.0, 0.0);
	glVertex3f(0.5, -0.5, -0.5);
	glVertex3f(0.5, -0.5, 0.5);
	glVertex3f(-0.5, -0.5, 0.5);
	glVertex3f(-0.5, -0.5, -0.5);
	glEnd();

	// White side - BACK
	glBegin(GL_POLYGON);
	glColor3f(1.0, 1.0, 1.0);
	glVertex3f(0.5, -0.5, 0.5);
	glVertex3f(0.5, 0.5, 0.5);
	glVertex3f(-0.5, 0.5, 0.5);
	glVertex3f(-0.5, -0.5, 0.5);
	glEnd();

	// Purple side - RIGHT
	glBegin(GL_POLYGON);
	glColor3f(1.0, 0.0, 1.0);
	glVertex3f(0.5, -0.5, -0.5);
	glVertex3f(0.5, 0.5, -0.5);
	glVertex3f(0.5, 0.5, 0.5);
	glVertex3f(0.5, -0.5, 0.5);
	glEnd();

	// Green side - LEFT
	glBegin(GL_POLYGON);
	glColor3f(0.0, 1.0, 0.0);
	glVertex3f(-0.5, -0.5, 0.5);
	glVertex3f(-0.5, 0.5, 0.5);
	glVertex3f(-0.5, 0.5, -0.5);
	glVertex3f(-0.5, -0.5, -0.5);
	glEnd();

	// Blue side - TOP
	glBegin(GL_POLYGON);
	glColor3f(0.0, 0.0, 1.0);
	glVertex3f(0.5, 0.5, 0.5);
	glVertex3f(0.5, 0.5, -0.5);
	glVertex3f(-0.5, 0.5, -0.5);
	glVertex3f(-0.5, 0.5, 0.5);
	glEnd();

	
	glEndList();
	glLoadIdentity();
	//gluPerspective(120.0, 1.0, 0.0, 10.0);
	//gluLookAt(0, 0.0, 1, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);

	glutMainLoop();
	return 0;
}

void display()
{
	glClear(GL_COLOR_BUFFER_BIT);
	

	//here create a protective block so transformation inside does not have a compound effect
	glPushMatrix();
	//glRotatef(angle	, 0.0, 1.0, 0.0);
	gluPerspective(120.0, 1.0, 0.0, 10.0);
	gluLookAt(sin(angle), 0.0, cos(angle), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
	glCallList(Cube);
	glPopMatrix();

	//this signals OGL to swap buffer, draw our "back" buffer to the front
	glutSwapBuffers();

	glFlush();
}

void f(int a)
{
	//what's happening here? 
	glutTimerFunc(25, f, 0);
	//a simple rotation angle increment routine
	angle += 0.1;
	if (angle > 360)
	{
		angle -= 360;
	}
	glutPostRedisplay();
}
